- Difference between loosely-typed and strictly-typed
- Run time error vs compile-time error
- Typescript is syntactical superset of JS
    - backward compatible 
    - TS never runs at all
    - TS is transpiled down to JS and that JS is run by browser and Nodejs
    - TS compilers
        - tsc (official)
        - esbuild
        - swc
    
- Using TS
    - create a ts config file using 'tsc --init' command
    - type is assigned using :dataType
    - "tsc -b": to compile ts file to js file

- Concepts
    - Assigning types
        - to variables 
        - to inputs
        - to returns
        - to callbacks
        - to objects -> using interfaces
    - Type inference: 

- TS config file
    - target
    - rootDir
    - outDir
    - noImplicitAny
    - removeComments

- Interfaces
    - how to define interfaces
    - opitional values in interface
    - implementing interfaces as a class
        - use keyword "implements" (only specific to typescript.)

- Types
    - similar to interfaces.
    - let you aggregate data
    - sntax:
        - type Name = {}
    - let you create unions (having values of "either" of  two ot more types)
    - let you create intersections (having values of "all" of two or more types)

- Difference between interfaces and types
    - 

- Array
    - use ":[]"

- Enums:
    - Short for "enumerations", these are just a set of constant values.
    - allow to make a set of constant values more human-readable 
    - specific to Typescript.
    - the final values at runtime are still numbers by default (0, 1, 2 and so on).
    - these values can be changed to other values (usually strings).
    - popular use case for enums is to create an enum of status codes for response that are returned using a server implemented in express

- Generics

- Exporting and importing modules
    - use ES6 syntax of imports and exports