1.5 - Async Functions, Promises, async-await 

1.5.1 - Asynchronous vs synchronous functions 

- Synchronous programming
    - sequential, line by line
    - the control reaches to the next line only when it is done with its preceeding line

- Asynchronous programming
    - non-sequential
    - the control will not get blocked due to a heavy network request or data fetch (which might take an uncertain amount of time) and hence will reach to the next line. The result of the preceeding call will be thrown to the call stack once all the synchronous code is executed
    - setTimeout(), setInterval(), fs.readFile(), fetch()
    - real uses of callbacks is in async code
    - event handlers are sort of asyn codes as they use callbacks inside them
    - earlier Asynchronous code dependended completely on callbacks. But using them heavily creates deeply nested async functions that are hard to maintain and debug. Such deeply nested asyn functions with several callbacks are known as "callback hell" or "pyramid of doom."
    - more modern approach to asyn programming involves using Promises.

- Real world use of callbacks 
- JS browser architecture (use latentflip.com to understand this diagramatically)

1.5.2 - Promises

    - a promise is an object that is returned by an async function, which represents the current state of the operation. 
    - when a caller calls an async function, the async function returns a promise to the caller, where the operation may or may not be finished (not, in most cases).
    - the promise object, though, has multiple methods that can handle the eventual success or failure of the operation.
    - fetch(), then(), json() - all are async in nature.

    - fetch()
        - it's an web API for making http requests
        - used to get data from a remote server
        - async in nature
        - gives back a "Response" object 
    
    - then() method and chaining promises
        - in context of promises, then() is a method that takes a function as an input, and that function is only executed when the promise is fulfilled, i.e. upon the successful completion of async code. 
        - .then() also returns a promise itself and hence, is a very elegant way to chain multiple asyn operations together that are easy to read and debug. 
        - the promise returned by the first then() becomes the input for the succeeding then() in async operations. This is known as "chaining promises."

    - catch() method 
        - used to handle the eventual failure of the async operation 
        - syntax: catch((error) => {}) 
        - use only one catch() at the end for all async operations.

    - Pending, fulfilled, rejected
        - pending: when an async function is called, the return of that function is a promise which is in pending status. The async operation has not succeeded or failed at that time. 
        - fulfilled: the async operation is successful and then() method is called.
        - rejected: the async operation has failed and the catch() method is called.

    - Promise.all()
        - in some cases, multiple async operations need to be executed but they don't depend upon each other.
        - in such cases, we start all those operations together and get notified using a single promise return.
        - Promise.all() takes in an array of promises and returns a single promise.
            - fulfilled:
                - when and if "all" of the promises in the array are fulfilled.
                - then() method is called with array of all the responses in the same order as the promises were passed to Promise.all()
            - rejected:
                - when and if "any" of the promises in the array is rejected.
                - catch() method is called with the error thrown by the promise that was rejected.

    - Promise.any()
        - similar to Promise.all() but here, it is fulfilled when and if "any" of the promises in the array is fulfilled (don't care which one) and rejected, when and if "all" of them are rejected.
- Async-await 